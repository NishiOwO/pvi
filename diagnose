#!/usr/bin/env perl
# $Id$$

my @compilers = ("clang", "gcc", "cc");
my @archivers = ("gar", "ar");

my $diag_exec = "";
my $diag_ar = "";
my $diag_cc = "";
my $diag_cflags = "";
my $diag_ldflags = "";
my $diag_libs = "";

my $diag_config = "";

my $flags = "";

sub path_find {
	my @pathlist = split(/:/, $ENV{"PATH"});
	if(-f $_[0]){
		return 1;
	}
	foreach my $path (@pathlist){
		if(-f $path . "/" . $_[0]){
			return 1;
		}
	}
	return 0;
}

sub test_program {
	my $o = "";
	my $add_cflags = "";

	if(!defined($_[1])){
		$o = ".o";
		$add_cflags = "-c";
	}

	open(OUT, ">", "test.c");
	print OUT ("$_[0]");
	close(OUT);
	my $out = `$diag_cc $diag_cflags $add_cflags -o test$o test.c $_[1] 2>&1`;
	my $status = $?;

	unlink("test.c");
	unlink("test.o");
	unlink("test");
	unlink("test.exe");

	return $status == 0;
}

sub check_header {
	my $ret = 1;
	my $def = "";
	my $flag = "have." . $_[0];
	$flag =~ s/\./_/g;
	$flag = uc($flag);
	$def = "#define $flag 1";
	print("Does $_[0] exist? ");
	if(test_program("#include <$_[0]>\nint main(){}\n")){
		print("yes\n");
	}else{
		print("no\n");
		$ret = 0;
		$def = "/* #undef $flag */";
	}
	$diag_config = $diag_config . "/* Define to 1 if you have the <$_[0]> header file. */\n$def\n\n";
	return $ret;
}

sub check_library {
	my $ret = 1;
	print("Does $_[0] exist in library $_[1]? ");
	if(test_program("extern void* $_[0];\nint main(){void* ref_$_[0] = $_[0];}\n", "-l$_[1]")){
		print("yes\n");
		$diag_libs = $diag_libs . " -l$_[1]";
	}else{
		print("no\n");
		$ret = 0;
	}
	return $ret;
}

print("Diagnose " . '$Id$' . "\n");

foreach my $arg (@ARGV){
	if($arg =~ /^([^\=]+)=(.*)$/){
		$ENV{$1} = $2;
	}elsif($arg =~ /^-(.+)$/){
		if(($1 eq '-help') || ($1 eq 'h')){
			print("Usage: ./diagnose [flags] [options]\n");
			print("\n");
			print("Flags:\n");
			print("  -h   --help  Shows this help message\n");
			print("\n");
			print("Options:\n");
			print("  CC           C compiler\n");
			print("  CFLAGS       C compiler flags\n");
			print("  LDFLAGS      C linker flags\n");
			print("  LIBS         C libraries\n");
			print("  AR           Archiver\n");
	 		exit(0);
		}else{
			print STDERR ("Unknown flag: -$1\n");
			exit(1);
		}
	}
}

if(defined($ENV{"CFLAGS"})){
	$diag_cflags = $ENV{"CFLAGS"};
}

if(defined($ENV{"AR"})){
	@archivers = reverse(@archivers);
	push(@archivers, $ENV{"AR"});
	@archivers = reverse(@archivers);
}

if(defined($ENV{"CC"})){
	@compilers = reverse(@compilers);
	push(@compilers, $ENV{"CC"});
	@compilers = reverse(@compilers);
}

print("What compiler do you have? ");
foreach my $cc (@compilers){
	if(path_find($cc)){
		print("$cc\n");
		$diag_cc = $cc;
		last;
	}
}

print("What archiver do you have? ");
foreach my $ar (@archivers){
	if(path_find($ar)){
		print("$ar\n");
		$diag_ar = $ar;
		last;
	}
}

print("Are we compiling for Windows? ");
if(!test_program("#ifdef _WIN32\nthis should fail\n#endif\nint main(){}\n")){
	print("yes\n");
	$diag_exec = ".exe";
}else{
	print("no\n");

	print("Are we compiling for Linux? ");
	if(!test_program("#ifdef __linux__\nthis should fail\n#endif\nint main(){}\n")){
		print("yes\n");
		$diag_cflags = $diag_cflags . " -D_DEFAULT_SOURCE=1";
	}else{
		print("no\n");
	}
}

print("What compiler is this? ");
if(!test_program("#ifdef __clang__\nthis should fail\n#endif\nint main(){}\n")){
	print("Clang\n");
}elsif(!test_program("#ifdef __GNUC__\nthis should fail\n#endif\nint main(){}\n")){
	print("GCC\n");
}elsif(!test_program("#ifdef __WATCOMC__\nthis should fail\n#endif\nint main(){}\n")){
	print("Watcom\n");
}elsif(!test_program("#ifdef __USLC__\nthis should fail\n#endif\nint main(){}\n")){
	print("UnixWare / OpenServer Development Kit\n");
}else{
	print("Unknown\n");
	print("This compiler is not supported yet\n");
	print("Contact maintainer or send patches\n");
	exit(1);
}

check_header("termios.h");
if(check_header("termcap.h") || check_header("term.h")){
	if(check_library("tgetent", "termcap")){
	}elsif(check_library("tgetent", "ncurses")){
	}elsif(check_library("tgetent", "curses")){
	}else{
		print("Can't find termcap library\n");
		exit(1);
	}
}elsif(check_header("windows.h")){
}else{
	print("Can't select terminal library\n");
	exit(1);
}
check_header("pwd.h");
check_header("unistd.h");
check_header("stdint.h");

open(OUT, ">", "diagnose.mk");
print OUT ("CC = $diag_cc\n");
print OUT ("AR = $diag_ar\n");
print OUT ("CFLAGS += $diag_cflags\n");
print OUT ("LDFLAGS += $diag_ldflags\n");
print OUT ("LIBS += $diag_libs\n");
print OUT ("EXEC = $diag_exec\n");
print OUT ("all: \$(TARGET)\n");

opendir(D, "src");
my @dir = readdir(D);
closedir(D);

foreach my $dirname (@dir){
	if(!($dirname =~ /\.c$/)){
		next;
	}
	my $objname = $dirname;

	$objname =~ s/\.c$/.o/;

	print OUT ("src/$objname: src/$dirname include/common.h include/machdep.h config.h\n");
}

close(OUT);
print("Wrote diagnose.mk\n");

open(OUT, ">", "config.h");
print OUT ("#ifndef __CONFIG_H__\n");
print OUT ("#define __CONFIG_H__\n");
print OUT ("\n");
print OUT ("$diag_config");
print OUT ("\n");
print OUT ("#endif\n");
close(OUT);
print("Wrote config.h\n");
