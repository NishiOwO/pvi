#!/usr/bin/env perl
# $Id$

my @compilers = ("clang", "gcc", "cc");

my $diag_cc = "";
my $diag_cflags = "";
my $diag_ldflags = "";
my $diag_libs = "";

my $flags = "";

sub path_find {
	my @pathlist = split(/:/, $ENV{"PATH"});
	if(-f $_[0]){
		return 1;
	}
	foreach my $path (@pathlist){
		if(-f $path . "/" . $_[0]){
			return 1;
		}
	}
	return 0;
}

sub test_program {
	my $o = "";
	my $add_cflags = "";

	if(!defined($_[1])){
		$o = ".o";
		$add_cflags = "-c";
	}

	open(IN, ">", "test.c");
	print IN ("$_[0]");
	close(IN);
	my $out = `$diag_cc $diag_cflags $add_cflags -o test$o test.c $_[1] 2>&1`;
	my $status = $?;

	unlink("test.c");
	unlink("test.o");
	unlink("test");
	unlink("test.exe");

	return $status == 0;
}

sub check_header {
	my $ret = 1;
	my $flag = "have." . $_[0];
	$flag =~ s/\./_/g;
	$flag = uc($flag);
	print("Does $_[0] exist? ");
	if(test_program("#include <$_[0]>\nint main(){}\n")){
		print("yes\n");
	}else{
		print("no\n");
		$ret = 0;
	}
	$diag_cflags = $diag_cflags . " -D$flag=$ret";
	return $ret;
}

sub check_library {
	my $ret = 1;
	print("Does $_[0] exist in library $_[1]? ");
	if(test_program("extern void* $_[0];\nint main(){void* ref_$_[0] = $_[0];}\n", "-l$_[1]")){
		print("yes\n");
		$diag_libs = $diag_libs . " -l$_[1]";
	}else{
		print("no\n");
		$ret = 0;
	}
	return $ret;
}

if(defined($ENV{"CFLAGS"})){
	$diag_cflags = $ENV{"CFLAGS"};
}

if(defined($ENV{"CC"})){
	@compilers = reverse(@compilers);
	push(@compilers, $ENV{"CC"});
	@compilers = reverse(@compilers);
}

print("Diagnose " . '$Id$' . "\n");

print("What compiler do you have? ");
foreach my $cc (@compilers){
	if(path_find($cc)){
		print("$cc\n");
		$diag_cc = $cc;
		last;
	}
}

print("What compiler is this? ");
if(!test_program("#ifdef __clang__\nthis should fail\n#endif\nint main(){}\n")){
	print("Clang\n");
}elsif(!test_program("#ifdef __GNUC__\nthis should fail\n#endif\nint main(){}\n")){
	print("GCC\n");
}elsif(!test_program("#ifdef __USLC__\nthis should fail\n#endif\nint main(){}\n")){
	print("UDK??\n");
}else{
	print("Unknown\n");
	print("This compiler is not supported yet\n");
	print("Contact maintainer or send patches\n");
	exit(1);
}

check_header("termios.h");
if(check_header("termcap.h") || check_header("term.h")){
	if(check_library("tgetent", "termcap")){
	}elsif(check_library("tgetent", "ncurses")){
	}elsif(check_library("tgetent", "curses")){
	}else{
		print("Can't find termcap library\n");
		exit(1);
	}
}elsif(check_header("windows.h")){
}else{
	print("Can't select terminal library\n");
	exit(1);
}
check_header("stdint.h");

print("CFLAGS += $diag_cflags\n");
print("LDFLAGS += $diag_ldflags\n");
print("LIBS += $diag_libs\n");
